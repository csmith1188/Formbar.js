<%- include('../partials/header_content') %>
<%- include('../partials/sockets') %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="/js/monaco-loader.js"></script>
    <title>
        <% if (locals.title) { %>
          <%- title + ' - ' %>
            <% } %>
              Formbar
      </title>
    <style>
        .logGrid {
            display: grid;
            justify-content: center;
            gap: 10px;
            width: 100%;
            padding: 0 20px;
            grid-template-columns: repeat( auto-fit, minmax(250px, 300px) );
            height: calc(100vh - 160px);
            overflow: scroll;
        }

        .infoLog {
            border: 5px solid #e6e35d !important;
        }

        .verboseLog {
            border: 5px solid #05b705 !important;
        }

        .errorLog {
            border: 5px solid #e65d5d !important;
        }

        .criticalLog {
            border: 5px solid #ff0000 !important;
        }

        #sorter {
            margin: auto;
            margin-bottom: 20px;
        }
    </style>
</head>

<body id="colorContent" role="document" tabindex="0">
<%- include('../partials/formbar_header') %>

<div class="content-container">
    <% if (locals.logs) {
        logs.sort((a, b) => {
            const extractDate = (filename) => {
                const match = filename.match(/(\d{4}-\d{2}-\d{2}-\d{2})/);
                return match ? new Date(match[1].replace(/-/g, ':')) : new Date(0);
            };
            return extractDate(b) - extractDate(a); // Sort newest first
        });
    %>

    <select name="sorter" id="sorter" class="revampButton">
        <option value="all">Show All</option>
        <option value="info">Info</option>
        <option value="verb">Verbose</option>
        <option value="err">Error</option>
        <option value="crit">Critical</option>
    </select>

    <div class="logGrid">
        <% for (let i = 0; i < logs.length; i++) { %>
            <% let logClass = '' %>
            <% let logDetails = logs[i].split('.log')[0].split('-'); %>
            <% let currentLogName = `${logDetails[1].charAt(0).toUpperCase() + logDetails[1].slice(1)} - ${logDetails[3]}/${logDetails[4]}/${logDetails[2]} at ${logDetails[5] % 12} ${logDetails[5] < 12 ? 'AM' : 'PM'}` %>
            <% if(logDetails[1] == 'info') { logClass = 'infoLog'; } %>
            <% if(logDetails[1] == 'verbose') { logClass = 'verboseLog' } %>
            <% if(logDetails[1] == 'error') { logClass = 'errorLog' } %>
            <% if(logDetails[1] == 'critical') { logClass = 'criticalLog' } %>

            <button onclick="location.href = '/logs/<%- logs[i] %>'" class="quickButton revampButton logButton <%- logClass %>">
                <%- currentLogName %>
            </button>
        <% } %>
    </div>
    <% } else if (locals.content !== undefined) { %>
        <div id="container" style="width:100%; height:100vh; border:1px solid grey"></div>
    <% } %>
</div>

</body>
<script>
    

    let sorter = document.getElementById('sorter');

    sorter.onchange = function() {
        let selectedValue = this.value;
        let buttons = document.querySelectorAll('.logButton');

        buttons.forEach(button => {
            if (selectedValue === 'all') {
                button.style.display = 'block';
            } else if (selectedValue === 'info' && button.classList.contains('infoLog')) {
                button.style.display = 'block';
            } else if (selectedValue === 'verb' && button.classList.contains('verboseLog')) {
                button.style.display = 'block';
            } else if (selectedValue === 'err' && button.classList.contains('errorLog')) {
                button.style.display = 'block';
            } else if (selectedValue === 'crit' && button.classList.contains('criticalLog')) {
                button.style.display = 'block';
            } else {
                button.style.display = 'none';
            }
        });
    };

    sorter.onchange();

    <% if (locals.content !== undefined) {%>
    require.config({ paths: { vs: "/js/vs" } });
    require(["vs/editor/editor.main"], function () {
        monaco.languages.register({ id: "logViewer" });

        monaco.languages.setMonarchTokensProvider("logViewer", {
            tokenizer: {
                root: [
                    [/^\[\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z]/, "timestamp"], // Match timestamp pattern
                ]
            }
        });

        // Define a custom light and dark theme for the log viewer
        monaco.editor.defineTheme('logviewer-light', {
            base: 'vs',
            inherit: true,
            rules: [
                {
                    token: "timestamp",
                    foreground: "#007ACC"
                }
            ],
            colors: {}
        });

        monaco.editor.defineTheme('logviewer-dark', {
            base: 'vs-dark',
            inherit: true,
            rules: [
                {
                    token: "timestamp",
                    foreground: "#9CDCFE"
                }
            ],
            colors: {}
        });

        monaco.editor.create(document.getElementById("container"), {
            value: `<%- JSON.stringify(content).slice(1, -1) %>`, // JSON.stringify to escape special characters and slice to remove quotes
            language: "logViewer",
            automaticLayout: true,
            readOnly: true
        });

        function updateMonacoTheme(isDark) {
            monaco.editor.setTheme(isDark ? 'logviewer-dark' : 'logviewer-light');
        }

        let lastTheme = getCookie("theme");
        updateMonacoTheme(lastTheme === "dark");

        setInterval(() => {
            const currentTheme = getCookie("theme");
            if (currentTheme !== lastTheme) {
                lastTheme = currentTheme;
                updateMonacoTheme(currentTheme === "dark");
            }
        }, 250);
    });

    <% } %>
</script>
</html>