<!DOCTYPE html>
<html lang="en">
<%- include('../partials/header_content') %>
	<%- include('../partials/sockets') %>
		<%- include('../partials/formbar_header') %>

			<head>
				<style>
					#vbContainer {
						top: 75px;
						height: 85%;
						justify-self: center;
					}
				</style>
				<script src="/js/deepObjectEqual.js"></script>
			</head>

			<body role="document" tabindex="0">
				<div id="studentVBar">
					<%- include("../partials/virtual_bar.ejs") %>
						<h2 id="pollPrompt" class="revampDivAlt"></h2>
						<% if (currentUser.classPermissions>= STUDENT_PERMISSIONS) { %>

							<div id="helpBreak">
								<div id="pollContent">
									<h1 id="noPoll" class="textColorContent">No active poll</h1>
									<div id="poll">
										<div id="pollForm"></div>
									</div>
								</div>
								<div id="studHelpAandBreak">
									<button onclick="{document.getElementById('requestHelpDialog').showModal();document.getElementById('backgroundDarken').classList.add('open')}" class="quickButton helpButton revampButton">Send Help Ticket</button>
									<button class="breakButton revampButton"
										onclick="{document.getElementById('requestBreakDialog').showModal();document.getElementById('backgroundDarken').classList.add('open')}">
										Take a Break
									</button>
								</div>
							</div>
				</div>
				<%- include('../partials/body_content') %>

					<dialog id="requestBreakDialog" class="contentBox revampDiv" on="console.log">
						<script>document.getElementById("requestBreakDialog").onclose = () => {document.getElementById('backgroundDarken').classList.remove('open')}</script>
						<form
							onsubmit="submitBreak(event);document.getElementById('bathroom').checked = false;document.getElementById('other').checked = false;document.getElementById('backgroundDarken').classList.remove('open')">
							<h3 style="margin-top: 0;">Take a break</h3>
							<div id="breakInfo">
								<div id="breakInputs" class="">
									<label class="form-control" id="pollControl" for="bathroom">
										<input type="radio" name="option" id="bathroom" value="Bathroom" required>
										Bathroom
									</label>
									<label class="form-control" id="pollControl" for="other">
										<input type="radio" name="option" id="other" value="other">
										Other
									</label>
								</div>
								<textarea class="hidden revampButton revampWithText" id="otherText" cols="25" rows="3"
									maxlength="150"></textarea>
							</div>
							<div id="takeBreak" class="hCentered" style="display: flex;flex-direction: row;justify-content: center;align-items: center;gap: 20px;">
								<button class="quickButton revampButton" id="cancel" type="button"
									onclick="document.getElementById('bathroom').checked = false;document.getElementById('other').checked = false;document.getElementById('requestBreakDialog').close();document.getElementById('backgroundDarken').classList.remove('open')">Cancel</button>
								<button class="quickButton revampButton" type="submit">Take Break</button>
							</div>
						</form>
					</dialog>
					<dialog id="requestHelpDialog" class="contentBox revampDiv">
						<script>document.getElementById("requestHelpDialog").onclose = () => {document.getElementById('backgroundDarken').classList.remove('open')}</script>
						<form onsubmit="help()">
							<h3 style="margin-top: 0;">Request Help</h3>
							<div id="eventForm">
								<textarea id="ticket" class="revampButton revampWithText" cols="30" rows="5" maxlength="150" class="helpBox"
									placeholder="Reason (optional)"></textarea>
								<!-- <input type="text" id="ticket" class="quickButton" placeholder="Reason(optional)"> -->
							</div>
							
							<div id="takeHelp" class="hCentered" style="display: flex;flex-direction: row;justify-content: center;align-items: center;gap: 20px;">
								<button class="quickButton revampButton" id="cancel" type="button" onclick="document.getElementById('requestHelpDialog').close();document.getElementById('backgroundDarken').classList.remove('open')">Cancel</button>
								<button class="quickButton revampButton" type="submit">Request Help</button>
							</div>
						</form>
					</dialog>
					<div id="backgroundDarken"></div>
					<% } %>
			</body>

			<% if(currentUser.classPermissions <= GUEST_PERMISSIONS) { %>
				<script>
					let pollPromptDisplayGuest = document.getElementById('pollPrompt');

					function updatePage(newPoll) {
						pollPromptDisplayGuest.innerText = newPoll.prompt;
					}

					socket.on('classUpdate', (classroomData) => {
						const newPoll = classroomData.poll;
						updatePage(newPoll)
					})
				</script>
			<% } %>

			<% if (currentUser.classPermissions>= STUDENT_PERMISSIONS) { %>
				<script type="text/javascript">
					//letiable creation
					let resTextBox = document.getElementById('resTextBox')
					let pollForm = document.getElementById('pollForm')
					let pollContent = document.getElementById('pollContent')
					let pollDiv = document.getElementById('poll')
					let pollPromptDisplay = document.getElementById('pollPrompt')
					noPoll = document.getElementById('noPoll')

					//stores the answer type that will be used in the student form
					//
					let multiAnswer = ""

					// For answering polls using only the keyboard
					document.addEventListener('keydown', (event) => {
						try {
							const key = +event.key - 1;
							const pollSelection = pollForm.children[key].children[0];

							// If the response is not already selected, then select it
							if (!pollSelection.checked) {
								pollSelection.click();
							}
						} catch (err) {
							// Do nothing, this is just to prevent errors when the user presses a key that does not correspond to a poll response
						}
					});

					let oldLetterRes = '<%- myRes %>'
					let oldTextRes = currentUser.pollRes.textRes

					let poll = {}
					let quiz = {}
					let votingRight = false

					function unselectRemove(event) {
						event.preventDefault();
						document.getElementById('remove').checked = false;
					}

					function updatePageLoop() {
						pollForm = document.getElementById('pollForm');
						pollPromptDisplay = document.getElementById('pollPrompt');

						if(pollDiv.querySelector("#remove")) {
							pollDiv.querySelector("#remove").remove()
						}
						if (poll.allowMultipleResponses) {
							multiAnswer = "checkbox"
						} else {
							multiAnswer = "button"
						}
						if (votingRight) {
							pollContent.style.display = 'block'

							if (poll.status) {
								noPoll.style.display = 'none'
								pollDiv.style.display = 'block'

								pollForm.innerHTML = ''
								pollPromptDisplay.innerText = poll.prompt
								// Creates all selectable answers and displays them to the user
								if (poll.allowTextResponses) {
									pollForm.innerHTML += `<textarea name="resText" cols="20" rows="5" id="resTextBox" class='revampButton revampWithText' value="${oldTextRes}"></textarea>`
								}
                                for (let response of Object.values(poll.responses)) {
                                    if(multiAnswer !== 'button') {
                                        response.answer = response.answer.replace(/</g, "&lt;").replace(/>/g, "&gt;"); // Sanitize HTML inputs

                                        pollForm.innerHTML += `<input type='checkbox' name="poll" class="revampButton pollButton" id="${response.answer}" style="--color: ${response.color}44;--theme-color: ${response.color};"/>${response.answer}`;
                                    } else {
                                        response.answer = response.answer.replace(/</g, "&lt;").replace(/>/g, "&gt;"); // Sanitize HTML inputs
                                        pollForm.innerHTML += `<button name="poll" class="revampButton pollButton ${response.answer == currentUser.pollRes.buttonRes ? 'activePollButton' : ''}" id="${response.answer}" style="background: ${response.color}44;--color: ${response.color};--theme-color: black;" onclick="submitPoll(this)">${response.answer}</button>`;
                                    }
                                }
								if (!poll.allowMultipleResponses /*&& poll.allowVoteChanges*/) {
									pollDiv.innerHTML += `<button class="revampButton" name="poll" id="remove" value="remove" onclick="submitPoll(this)">Remove Vote</button>`
								} else if(poll.allowMultipleResponses) {
									pollDiv.innerHTML += `<button class="revampButton" id="remove" onclick="submitPoll(this)">Submit</button>`
								}
							} else {
								noPoll.style.display = 'block'
								pollDiv.style.display = 'none'
							}

							// If the user has responded before on this poll, put their previous responses in the form
							const resTextBox = document.getElementById("resTextBox")
							if (!poll.allowMultipleResponses) {
								// If the poll isn't multi-res, handle it normally
								// const oldLetterElement = document.getElementById(oldLetterRes)
								// if (oldLetterRes && oldLetterElement) {
								// 	oldLetterElement.checked = true
								// }
							} else {
								// If the poll is multi-res, split the response and check all of them
								const splitLetterRes = currentUser.pollRes.buttonRes;
								for (const splitLetter of splitLetterRes) {
									const oldLetterElement = document.getElementById(splitLetter)
									if (oldLetterElement) {
										oldLetterElement.checked = true
									}
								}
							}


							if (oldTextRes && resTextBox) {
								resTextBox.value = oldTextRes
							}
						}
					}

					function updatePage() {
						if (poll.allowedResponses.length > 0) {
							for (let eachAllowedResponse of poll.allowedResponses) {
								if (eachAllowedResponse == currentUser.id) {
									updatePageLoop()
									return
								}
							}
							for (let eachUnallowedResponse of poll.unallowedResponses) {
								if (eachUnallowedResponse == currentUser.id) {
									console.log('hello')
									pollForm.innerHTML = `<label class="form-control" id="pollControl" style="--theme-color: hsl(0, 0%, 70%);">You may not answer currently</label>`
								}
							}
						}
						else if (poll.allowedResponses.length == 0) {
							updatePageLoop()
						}
					}

					// Submits the users answer to the poll
					// Takes the pollResponses value which defines the number of possible answers
					function submitPoll(button) {
						let radios = document.getElementsByName('poll')
						let textarea = document.getElementById("resTextBox")
						let lettRes = []
						let textRes = ''

						//Subtract 2 from radios.length to make sure the bathroom break does not interfere with radio values and lettRes
						for (let i = 0; i < radios.length; i++) {
							if (radios[i].type == "checkbox" && radios[i].checked) {
								lettRes.push(radios[i].id)
							} else if(radios[i].tagName == 'BUTTON' && radios[i] == button) {
								lettRes.push(radios[i].id)
							}
						}

						// If the poll isn't multi-res, extract the single response from the array
						if (lettRes.length == 1 && !poll.allowMultipleResponses) {
							lettRes = lettRes[0]
						}

						if (textarea) {
							textRes = textarea.value
						}

						currentUser.pollRes = {buttonRes: lettRes, textRes: textRes, date: new Date()};
						oldLetterRes = lettRes
						oldTextRes = textRes

						if(lettRes == "remove") {
							currentUser.pollRes = {buttonRes: '', textRes: '', date: null};
							oldLetterRes = ''
							oldTextRes = ''

							if(textarea) textarea.value = ''
						}

						// Sends user input to the server
						socket.emit('pollResp', lettRes, textRes)
					}

					socket.on('classUpdate', (classroomData) => {
                        const newPoll = classroomData.poll;
                        if (deepObjectEqual(poll, newPoll)) return;

                        poll = newPoll;
                        if (poll.status) {
                            socket.emit('getCanVote', currentUser.id);
                        }
                        updatePage();
					});

					socket.on('pollResp', (voteData) => {
						const allResponses = document.querySelectorAll('#pollControl input[name="poll"]')
						const oldLetterElement = document.querySelector(`#pollControl input[value="${voteData.res}"]`);

						// Set all responses to unchecked
						allResponses.forEach((response) => {
							if (response.type == 'radio' || response.type == 'checkbox') {
								response.checked = false;
							}
						});

						// Set the correct response to checked
						if (oldLetterElement && !oldLetterElement.checked) {
							oldLetterElement.checked = true;
						}

						if (voteData.textRes) {
							const resTextBox = document.getElementById("resTextBox");
							if (resTextBox) {
								resTextBox.value = voteData.textRes;
							}
						}
					});

					if (poll.status) {
						socket.emit('getCanVote', currentUser.id)
					}
					socket.on('getCanVote', (newVotingRight) => {
						votingRight = newVotingRight
						if (newVotingRight) {
							updatePage()
						} else {
							pollForm.innerHTML = `<label class="form-control" id="pollControl" style="--theme-color: hsl(0, 0%, 70%);">You may not answer currently</label>`
						}
					})

					//help ticket/break button

					socket.on("helpSuccess", () => {
						alert("Help ticket sent")
					})

					function help() {
						let reason = document.getElementById('ticket').value
						socket.emit('help', reason)
						document.getElementById('ticket').value = ''
					}

					let options = document.getElementsByName('option')
					for (let option of options) {
						option.onchange = () => {
							let otherRadio = document.getElementById('other')
							let otherText = document.getElementById('otherText')

							if (otherRadio.checked) {
								otherText.required = true
								otherText.classList.remove('hidden')
							}
							else {
								otherText.required = false
								otherText.classList.add('hidden')
							}
						}
					}

					function submitBreak() {
						event.preventDefault()
						document.getElementById('requestBreakDialog').close()

						let reason = document.querySelector('input[name=option]:checked').value
						if (reason == 'other')
							reason = document.getElementById('otherText').value

						socket.emit('requestBreak', reason)
					}
				</script>
				<% } %>

				<%- include('../partials/footer_content') %>
</html>
